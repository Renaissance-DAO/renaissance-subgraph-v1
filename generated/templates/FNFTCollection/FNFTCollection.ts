// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuctionLengthUpdated extends ethereum.Event {
  get params(): AuctionLengthUpdated__Params {
    return new AuctionLengthUpdated__Params(this);
  }
}

export class AuctionLengthUpdated__Params {
  _event: AuctionLengthUpdated;

  constructor(event: AuctionLengthUpdated) {
    this._event = event;
  }

  get length(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AuctionStarted extends ethereum.Event {
  get params(): AuctionStarted__Params {
    return new AuctionStarted__Params(this);
  }
}

export class AuctionStarted__Params {
  _event: AuctionStarted;

  constructor(event: AuctionStarted) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuctionWon extends ethereum.Event {
  get params(): AuctionWon__Params {
    return new AuctionWon__Params(this);
  }
}

export class AuctionWon__Params {
  _event: AuctionWon;

  constructor(event: AuctionWon) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BidMade extends ethereum.Event {
  get params(): BidMade__Params {
    return new BidMade__Params(this);
  }
}

export class BidMade__Params {
  _event: BidMade;

  constructor(event: BidMade) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CuratorUpdated extends ethereum.Event {
  get params(): CuratorUpdated__Params {
    return new CuratorUpdated__Params(this);
  }
}

export class CuratorUpdated__Params {
  _event: CuratorUpdated;

  constructor(event: CuratorUpdated) {
    this._event = event;
  }

  get oldCurator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newCurator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EligibilityDeployed extends ethereum.Event {
  get params(): EligibilityDeployed__Params {
    return new EligibilityDeployed__Params(this);
  }
}

export class EligibilityDeployed__Params {
  _event: EligibilityDeployed;

  constructor(event: EligibilityDeployed) {
    this._event = event;
  }

  get moduleIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get eligibilityAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EnableMintUpdated extends ethereum.Event {
  get params(): EnableMintUpdated__Params {
    return new EnableMintUpdated__Params(this);
  }
}

export class EnableMintUpdated__Params {
  _event: EnableMintUpdated;

  constructor(event: EnableMintUpdated) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class EnableRandomRedeemUpdated extends ethereum.Event {
  get params(): EnableRandomRedeemUpdated__Params {
    return new EnableRandomRedeemUpdated__Params(this);
  }
}

export class EnableRandomRedeemUpdated__Params {
  _event: EnableRandomRedeemUpdated;

  constructor(event: EnableRandomRedeemUpdated) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class EnableRandomSwapUpdated extends ethereum.Event {
  get params(): EnableRandomSwapUpdated__Params {
    return new EnableRandomSwapUpdated__Params(this);
  }
}

export class EnableRandomSwapUpdated__Params {
  _event: EnableRandomSwapUpdated;

  constructor(event: EnableRandomSwapUpdated) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class EnableTargetRedeemUpdated extends ethereum.Event {
  get params(): EnableTargetRedeemUpdated__Params {
    return new EnableTargetRedeemUpdated__Params(this);
  }
}

export class EnableTargetRedeemUpdated__Params {
  _event: EnableTargetRedeemUpdated;

  constructor(event: EnableTargetRedeemUpdated) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class EnableTargetSwapUpdated extends ethereum.Event {
  get params(): EnableTargetSwapUpdated__Params {
    return new EnableTargetSwapUpdated__Params(this);
  }
}

export class EnableTargetSwapUpdated__Params {
  _event: EnableTargetSwapUpdated;

  constructor(event: EnableTargetSwapUpdated) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get nftIds(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get nftIds(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get specificIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Swapped extends ethereum.Event {
  get params(): Swapped__Params {
    return new Swapped__Params(this);
  }
}

export class Swapped__Params {
  _event: Swapped;

  constructor(event: Swapped) {
    this._event = event;
  }

  get nftIds(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get specificIds(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get redeemedIds(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get to(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VaultInit extends ethereum.Event {
  get params(): VaultInit__Params {
    return new VaultInit__Params(this);
  }
}

export class VaultInit__Params {
  _event: VaultInit;

  constructor(event: VaultInit) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get is1155(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get allowAllItems(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class VaultShutdown extends ethereum.Event {
  get params(): VaultShutdown__Params {
    return new VaultShutdown__Params(this);
  }
}

export class VaultShutdown__Params {
  _event: VaultShutdown;

  constructor(event: VaultShutdown) {
    this._event = event;
  }

  get assetAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get numItems(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class FNFTCollection__auctionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: Address;

  constructor(value0: BigInt, value1: BigInt, value2: i32, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getLivePrice(): BigInt {
    return this.value0;
  }

  getEnd(): BigInt {
    return this.value1;
  }

  getState(): i32 {
    return this.value2;
  }

  getWinning(): Address {
    return this.value3;
  }
}

export class FNFTCollection__vaultFeesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }
}

export class FNFTCollection extends ethereum.SmartContract {
  static bind(address: Address): FNFTCollection {
    return new FNFTCollection("FNFTCollection", address);
  }

  BASE(): BigInt {
    let result = super.call("BASE", "BASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE", "BASE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allHoldings(): Array<BigInt> {
    let result = super.call("allHoldings", "allHoldings():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_allHoldings(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("allHoldings", "allHoldings():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  allValidNFTs(tokenIds: Array<BigInt>): boolean {
    let result = super.call("allValidNFTs", "allValidNFTs(uint256[]):(bool)", [
      ethereum.Value.fromUnsignedBigIntArray(tokenIds)
    ]);

    return result[0].toBoolean();
  }

  try_allValidNFTs(tokenIds: Array<BigInt>): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allValidNFTs",
      "allValidNFTs(uint256[]):(bool)",
      [ethereum.Value.fromUnsignedBigIntArray(tokenIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowAllItems(): boolean {
    let result = super.call("allowAllItems", "allowAllItems():(bool)", []);

    return result[0].toBoolean();
  }

  try_allowAllItems(): ethereum.CallResult<boolean> {
    let result = super.tryCall("allowAllItems", "allowAllItems():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  assetAddress(): Address {
    let result = super.call("assetAddress", "assetAddress():(address)", []);

    return result[0].toAddress();
  }

  try_assetAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("assetAddress", "assetAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  auctionLength(): BigInt {
    let result = super.call("auctionLength", "auctionLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_auctionLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionLength",
      "auctionLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctions(param0: BigInt): FNFTCollection__auctionsResult {
    let result = super.call(
      "auctions",
      "auctions(uint256):(uint256,uint256,uint8,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new FNFTCollection__auctionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toAddress()
    );
  }

  try_auctions(
    param0: BigInt
  ): ethereum.CallResult<FNFTCollection__auctionsResult> {
    let result = super.tryCall(
      "auctions",
      "auctions(uint256):(uint256,uint256,uint8,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FNFTCollection__auctionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toAddress()
      )
    );
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  curator(): Address {
    let result = super.call("curator", "curator():(address)", []);

    return result[0].toAddress();
  }

  try_curator(): ethereum.CallResult<Address> {
    let result = super.tryCall("curator", "curator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deployEligibilityStorage(moduleIndex: BigInt, initData: Bytes): Address {
    let result = super.call(
      "deployEligibilityStorage",
      "deployEligibilityStorage(uint256,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(moduleIndex),
        ethereum.Value.fromBytes(initData)
      ]
    );

    return result[0].toAddress();
  }

  try_deployEligibilityStorage(
    moduleIndex: BigInt,
    initData: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployEligibilityStorage",
      "deployEligibilityStorage(uint256,bytes):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(moduleIndex),
        ethereum.Value.fromBytes(initData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositors(param0: BigInt): Address {
    let result = super.call("depositors", "depositors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_depositors(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("depositors", "depositors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  eligibilityStorage(): Address {
    let result = super.call(
      "eligibilityStorage",
      "eligibilityStorage():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_eligibilityStorage(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "eligibilityStorage",
      "eligibilityStorage():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  enableBid(): boolean {
    let result = super.call("enableBid", "enableBid():(bool)", []);

    return result[0].toBoolean();
  }

  try_enableBid(): ethereum.CallResult<boolean> {
    let result = super.tryCall("enableBid", "enableBid():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  enableMint(): boolean {
    let result = super.call("enableMint", "enableMint():(bool)", []);

    return result[0].toBoolean();
  }

  try_enableMint(): ethereum.CallResult<boolean> {
    let result = super.tryCall("enableMint", "enableMint():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  enableRandomRedeem(): boolean {
    let result = super.call(
      "enableRandomRedeem",
      "enableRandomRedeem():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_enableRandomRedeem(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "enableRandomRedeem",
      "enableRandomRedeem():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  enableRandomSwap(): boolean {
    let result = super.call(
      "enableRandomSwap",
      "enableRandomSwap():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_enableRandomSwap(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "enableRandomSwap",
      "enableRandomSwap():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  enableTargetRedeem(): boolean {
    let result = super.call(
      "enableTargetRedeem",
      "enableTargetRedeem():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_enableTargetRedeem(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "enableTargetRedeem",
      "enableTargetRedeem():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  enableTargetSwap(): boolean {
    let result = super.call(
      "enableTargetSwap",
      "enableTargetSwap():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_enableTargetSwap(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "enableTargetSwap",
      "enableTargetSwap():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  flashFee(borrowedToken: Address, amount: BigInt): BigInt {
    let result = super.call("flashFee", "flashFee(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(borrowedToken),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_flashFee(
    borrowedToken: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "flashFee",
      "flashFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(borrowedToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  flashLoan(
    receiver: Address,
    borrowedToken: Address,
    amount: BigInt,
    data: Bytes
  ): boolean {
    let result = super.call(
      "flashLoan",
      "flashLoan(address,address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(borrowedToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBoolean();
  }

  try_flashLoan(
    receiver: Address,
    borrowedToken: Address,
    amount: BigInt,
    data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "flashLoan",
      "flashLoan(address,address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(borrowedToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  is1155(): boolean {
    let result = super.call("is1155", "is1155():(bool)", []);

    return result[0].toBoolean();
  }

  try_is1155(): ethereum.CallResult<boolean> {
    let result = super.tryCall("is1155", "is1155():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxFlashLoan(token: Address): BigInt {
    let result = super.call("maxFlashLoan", "maxFlashLoan(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_maxFlashLoan(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxFlashLoan",
      "maxFlashLoan(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(tokenIds: Array<BigInt>, amounts: Array<BigInt>): BigInt {
    let result = super.call("mint", "mint(uint256[],uint256[]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(tokenIds),
      ethereum.Value.fromUnsignedBigIntArray(amounts)
    ]);

    return result[0].toBigInt();
  }

  try_mint(
    tokenIds: Array<BigInt>,
    amounts: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(uint256[],uint256[]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(tokenIds),
      ethereum.Value.fromUnsignedBigIntArray(amounts)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintFee(): BigInt {
    let result = super.call("mintFee", "mintFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintFee", "mintFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintTo(tokenIds: Array<BigInt>, amounts: Array<BigInt>, to: Address): BigInt {
    let result = super.call(
      "mintTo",
      "mintTo(uint256[],uint256[],address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromAddress(to)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintTo(
    tokenIds: Array<BigInt>,
    amounts: Array<BigInt>,
    to: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintTo",
      "mintTo(uint256[],uint256[],address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromAddress(to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftIdAt(holdingsIndex: BigInt): BigInt {
    let result = super.call("nftIdAt", "nftIdAt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(holdingsIndex)
    ]);

    return result[0].toBigInt();
  }

  try_nftIdAt(holdingsIndex: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nftIdAt", "nftIdAt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(holdingsIndex)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quantity1155(param0: BigInt): BigInt {
    let result = super.call("quantity1155", "quantity1155(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_quantity1155(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quantity1155",
      "quantity1155(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  randomRedeemFee(): BigInt {
    let result = super.call(
      "randomRedeemFee",
      "randomRedeemFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_randomRedeemFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "randomRedeemFee",
      "randomRedeemFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  randomSwapFee(): BigInt {
    let result = super.call("randomSwapFee", "randomSwapFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_randomSwapFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "randomSwapFee",
      "randomSwapFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(amount: BigInt, specificIds: Array<BigInt>): Array<BigInt> {
    let result = super.call("redeem", "redeem(uint256,uint256[]):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromUnsignedBigIntArray(specificIds)
    ]);

    return result[0].toBigIntArray();
  }

  try_redeem(
    amount: BigInt,
    specificIds: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "redeem",
      "redeem(uint256,uint256[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigIntArray(specificIds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  redeemTo(
    amount: BigInt,
    specificIds: Array<BigInt>,
    to: Address
  ): Array<BigInt> {
    let result = super.call(
      "redeemTo",
      "redeemTo(uint256,uint256[],address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigIntArray(specificIds),
        ethereum.Value.fromAddress(to)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_redeemTo(
    amount: BigInt,
    specificIds: Array<BigInt>,
    to: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "redeemTo",
      "redeemTo(uint256,uint256[],address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigIntArray(specificIds),
        ethereum.Value.fromAddress(to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swap(
    tokenIds: Array<BigInt>,
    amounts: Array<BigInt>,
    specificIds: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "swap",
      "swap(uint256[],uint256[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigIntArray(specificIds)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swap(
    tokenIds: Array<BigInt>,
    amounts: Array<BigInt>,
    specificIds: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swap",
      "swap(uint256[],uint256[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigIntArray(specificIds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapTo(
    tokenIds: Array<BigInt>,
    amounts: Array<BigInt>,
    specificIds: Array<BigInt>,
    to: Address
  ): Array<BigInt> {
    let result = super.call(
      "swapTo",
      "swapTo(uint256[],uint256[],uint256[],address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigIntArray(specificIds),
        ethereum.Value.fromAddress(to)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapTo(
    tokenIds: Array<BigInt>,
    amounts: Array<BigInt>,
    specificIds: Array<BigInt>,
    to: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapTo",
      "swapTo(uint256[],uint256[],uint256[],address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigIntArray(specificIds),
        ethereum.Value.fromAddress(to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  targetRedeemFee(): BigInt {
    let result = super.call(
      "targetRedeemFee",
      "targetRedeemFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_targetRedeemFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetRedeemFee",
      "targetRedeemFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  targetSwapFee(): BigInt {
    let result = super.call("targetSwapFee", "targetSwapFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_targetSwapFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetSwapFee",
      "targetSwapFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalHoldings(): BigInt {
    let result = super.call("totalHoldings", "totalHoldings():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalHoldings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalHoldings",
      "totalHoldings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vaultFees(): FNFTCollection__vaultFeesResult {
    let result = super.call(
      "vaultFees",
      "vaultFees():(uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new FNFTCollection__vaultFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_vaultFees(): ethereum.CallResult<FNFTCollection__vaultFeesResult> {
    let result = super.tryCall(
      "vaultFees",
      "vaultFees():(uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FNFTCollection__vaultFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  vaultId(): BigInt {
    let result = super.call("vaultId", "vaultId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_vaultId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultId", "vaultId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultManager(): Address {
    let result = super.call("vaultManager", "vaultManager():(address)", []);

    return result[0].toAddress();
  }

  try_vaultManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("vaultManager", "vaultManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class __FNFTCollection_initCall extends ethereum.Call {
  get inputs(): __FNFTCollection_initCall__Inputs {
    return new __FNFTCollection_initCall__Inputs(this);
  }

  get outputs(): __FNFTCollection_initCall__Outputs {
    return new __FNFTCollection_initCall__Outputs(this);
  }
}

export class __FNFTCollection_initCall__Inputs {
  _call: __FNFTCollection_initCall;

  constructor(call: __FNFTCollection_initCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _curator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _assetAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _is1155(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _allowAllItems(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class __FNFTCollection_initCall__Outputs {
  _call: __FNFTCollection_initCall;

  constructor(call: __FNFTCollection_initCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DeployEligibilityStorageCall extends ethereum.Call {
  get inputs(): DeployEligibilityStorageCall__Inputs {
    return new DeployEligibilityStorageCall__Inputs(this);
  }

  get outputs(): DeployEligibilityStorageCall__Outputs {
    return new DeployEligibilityStorageCall__Outputs(this);
  }
}

export class DeployEligibilityStorageCall__Inputs {
  _call: DeployEligibilityStorageCall;

  constructor(call: DeployEligibilityStorageCall) {
    this._call = call;
  }

  get moduleIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get initData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeployEligibilityStorageCall__Outputs {
  _call: DeployEligibilityStorageCall;

  constructor(call: DeployEligibilityStorageCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DisableVaultFeesCall extends ethereum.Call {
  get inputs(): DisableVaultFeesCall__Inputs {
    return new DisableVaultFeesCall__Inputs(this);
  }

  get outputs(): DisableVaultFeesCall__Outputs {
    return new DisableVaultFeesCall__Outputs(this);
  }
}

export class DisableVaultFeesCall__Inputs {
  _call: DisableVaultFeesCall;

  constructor(call: DisableVaultFeesCall) {
    this._call = call;
  }
}

export class DisableVaultFeesCall__Outputs {
  _call: DisableVaultFeesCall;

  constructor(call: DisableVaultFeesCall) {
    this._call = call;
  }
}

export class EndAuctionCall extends ethereum.Call {
  get inputs(): EndAuctionCall__Inputs {
    return new EndAuctionCall__Inputs(this);
  }

  get outputs(): EndAuctionCall__Outputs {
    return new EndAuctionCall__Outputs(this);
  }
}

export class EndAuctionCall__Inputs {
  _call: EndAuctionCall;

  constructor(call: EndAuctionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EndAuctionCall__Outputs {
  _call: EndAuctionCall;

  constructor(call: EndAuctionCall) {
    this._call = call;
  }
}

export class FinalizeVaultCall extends ethereum.Call {
  get inputs(): FinalizeVaultCall__Inputs {
    return new FinalizeVaultCall__Inputs(this);
  }

  get outputs(): FinalizeVaultCall__Outputs {
    return new FinalizeVaultCall__Outputs(this);
  }
}

export class FinalizeVaultCall__Inputs {
  _call: FinalizeVaultCall;

  constructor(call: FinalizeVaultCall) {
    this._call = call;
  }
}

export class FinalizeVaultCall__Outputs {
  _call: FinalizeVaultCall;

  constructor(call: FinalizeVaultCall) {
    this._call = call;
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrowedToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintToCall extends ethereum.Call {
  get inputs(): MintToCall__Inputs {
    return new MintToCall__Inputs(this);
  }

  get outputs(): MintToCall__Outputs {
    return new MintToCall__Outputs(this);
  }
}

export class MintToCall__Inputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MintToCall__Outputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get specificIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class RedeemToCall extends ethereum.Call {
  get inputs(): RedeemToCall__Inputs {
    return new RedeemToCall__Inputs(this);
  }

  get outputs(): RedeemToCall__Outputs {
    return new RedeemToCall__Outputs(this);
  }
}

export class RedeemToCall__Inputs {
  _call: RedeemToCall;

  constructor(call: RedeemToCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get specificIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemToCall__Outputs {
  _call: RedeemToCall;

  constructor(call: RedeemToCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RetrieveTokensCall extends ethereum.Call {
  get inputs(): RetrieveTokensCall__Inputs {
    return new RetrieveTokensCall__Inputs(this);
  }

  get outputs(): RetrieveTokensCall__Outputs {
    return new RetrieveTokensCall__Outputs(this);
  }
}

export class RetrieveTokensCall__Inputs {
  _call: RetrieveTokensCall;

  constructor(call: RetrieveTokensCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RetrieveTokensCall__Outputs {
  _call: RetrieveTokensCall;

  constructor(call: RetrieveTokensCall) {
    this._call = call;
  }
}

export class SetAuctionLengthCall extends ethereum.Call {
  get inputs(): SetAuctionLengthCall__Inputs {
    return new SetAuctionLengthCall__Inputs(this);
  }

  get outputs(): SetAuctionLengthCall__Outputs {
    return new SetAuctionLengthCall__Outputs(this);
  }
}

export class SetAuctionLengthCall__Inputs {
  _call: SetAuctionLengthCall;

  constructor(call: SetAuctionLengthCall) {
    this._call = call;
  }

  get _auctionLength(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAuctionLengthCall__Outputs {
  _call: SetAuctionLengthCall;

  constructor(call: SetAuctionLengthCall) {
    this._call = call;
  }
}

export class SetCuratorCall extends ethereum.Call {
  get inputs(): SetCuratorCall__Inputs {
    return new SetCuratorCall__Inputs(this);
  }

  get outputs(): SetCuratorCall__Outputs {
    return new SetCuratorCall__Outputs(this);
  }
}

export class SetCuratorCall__Inputs {
  _call: SetCuratorCall;

  constructor(call: SetCuratorCall) {
    this._call = call;
  }

  get _curator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCuratorCall__Outputs {
  _call: SetCuratorCall;

  constructor(call: SetCuratorCall) {
    this._call = call;
  }
}

export class SetFeesCall extends ethereum.Call {
  get inputs(): SetFeesCall__Inputs {
    return new SetFeesCall__Inputs(this);
  }

  get outputs(): SetFeesCall__Outputs {
    return new SetFeesCall__Outputs(this);
  }
}

export class SetFeesCall__Inputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }

  get _mintFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _randomRedeemFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _targetRedeemFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _randomSwapFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _targetSwapFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetFeesCall__Outputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }
}

export class SetVaultFeaturesCall extends ethereum.Call {
  get inputs(): SetVaultFeaturesCall__Inputs {
    return new SetVaultFeaturesCall__Inputs(this);
  }

  get outputs(): SetVaultFeaturesCall__Outputs {
    return new SetVaultFeaturesCall__Outputs(this);
  }
}

export class SetVaultFeaturesCall__Inputs {
  _call: SetVaultFeaturesCall;

  constructor(call: SetVaultFeaturesCall) {
    this._call = call;
  }

  get _enableMint(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _enableRandomRedeem(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _enableTargetRedeem(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _enableRandomSwap(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _enableTargetSwap(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class SetVaultFeaturesCall__Outputs {
  _call: SetVaultFeaturesCall;

  constructor(call: SetVaultFeaturesCall) {
    this._call = call;
  }
}

export class SetVaultMetadataCall extends ethereum.Call {
  get inputs(): SetVaultMetadataCall__Inputs {
    return new SetVaultMetadataCall__Inputs(this);
  }

  get outputs(): SetVaultMetadataCall__Outputs {
    return new SetVaultMetadataCall__Outputs(this);
  }
}

export class SetVaultMetadataCall__Inputs {
  _call: SetVaultMetadataCall;

  constructor(call: SetVaultMetadataCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetVaultMetadataCall__Outputs {
  _call: SetVaultMetadataCall;

  constructor(call: SetVaultMetadataCall) {
    this._call = call;
  }
}

export class ShutdownCall extends ethereum.Call {
  get inputs(): ShutdownCall__Inputs {
    return new ShutdownCall__Inputs(this);
  }

  get outputs(): ShutdownCall__Outputs {
    return new ShutdownCall__Outputs(this);
  }
}

export class ShutdownCall__Inputs {
  _call: ShutdownCall;

  constructor(call: ShutdownCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ShutdownCall__Outputs {
  _call: ShutdownCall;

  constructor(call: ShutdownCall) {
    this._call = call;
  }
}

export class StartAuctionCall extends ethereum.Call {
  get inputs(): StartAuctionCall__Inputs {
    return new StartAuctionCall__Inputs(this);
  }

  get outputs(): StartAuctionCall__Outputs {
    return new StartAuctionCall__Outputs(this);
  }
}

export class StartAuctionCall__Inputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StartAuctionCall__Outputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get specificIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapToCall extends ethereum.Call {
  get inputs(): SwapToCall__Inputs {
    return new SwapToCall__Inputs(this);
  }

  get outputs(): SwapToCall__Outputs {
    return new SwapToCall__Outputs(this);
  }
}

export class SwapToCall__Inputs {
  _call: SwapToCall;

  constructor(call: SwapToCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get specificIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SwapToCall__Outputs {
  _call: SwapToCall;

  constructor(call: SwapToCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
